<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[搭建境外服务器,科学越过GFW]]></title>
      <url>http://blog.wususu.cn/2017/01/09/%E6%90%AD%E5%BB%BA%E5%A2%83%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8-%E7%A7%91%E5%AD%A6%E8%B6%8A%E8%BF%87GFW/</url>
      <content type="html"><![CDATA[<p>  翻墙是一个程序员的必备技能之一,这里介绍一下我所使用过的翻墙方法:</p>
<ul>
<li><strong>购买VPN</strong>: 全局翻墙,不太稳定,数据不安全,性价比不高, 这种只在windows使用过,搜索引擎一搜一大把,可以免费体验,不再赘述</li>
<li><strong>修改hosts文件</strong>: 免费,不稳定,安全,需要经常更新hosts,勉强支持网页搜索,点击<a href="https://laod.cn/hosts/2016-google-hosts.html" target="_blank" rel="external">这里</a>查看教程 </li>
<li><strong>使用lantern</strong>: 网速一般,全局翻墙可以流畅看youtube,数据不安全,使用方便,每月免费使用800M, 超额将限速一般情况下,lantern可以满足大部分需求了<br>  目前支持 windows, linux 和 android 三种系统,据说ios的也快出了点击这里<a href="https://getlantern.org/" target="_blank" rel="external">下载</a></li>
<li><strong>使用shadowsocks</strong>, 这里又分为两种:<ul>
<li>第一种是<strong>购买使用免费帐号</strong>,使用别人搭建的境外vps,不过这也意味着你上网的数据将会被代理的服务器获取, 网速取决于该vps的配置以及ss使用量</li>
<li>第二种是<strong>自己搭建</strong>境外服务器, 所有的数据都由自己一手掌握,是最快最安全的,不过需要购买vps和一定的技术支持</li>
</ul>
</li>
</ul>
<p><strong>接下来就详细介绍下如何着手搭建自己的ss服务器以及各种客户端链接方式 </strong></p>
<h4 id="购买vps"><a href="#购买vps" class="headerlink" title="购买vps"></a>购买vps</h4><p>  vps,即虚拟主机,我使用的是搬瓦工的主机,点击<a href="http://banwagong.cn/" target="_blank" rel="external">这里</a>进行购买,挑最便宜的买,年付$11.99没货,就选第二便宜的$18.99,这里要注意,搬瓦工是支持升级主机配置的,所以一开始最好买便宜的一个月,用的顺手再延期加配置.<strong>Tips: 记得在中文官网领取折扣卷</strong><br>  <img src="/img/201701091.png" alt="购买页面"></p>
<p>  因为是国外供应商,可能你会担心交易的问题,这可以放心,搬瓦工已经替你考虑好了,付款方式是<strong>支持Alipay</strong>的.</p>
<h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>  购买成功后将会收到服务器ip端口还有root密码的邮件,通过ssh就能连接上服务器了,如果对Linux系统不熟悉,没事,那就继续跟着我走:</p>
<ul>
<li><p>在菜单Services处找到<strong>My Services</strong>可以看到所购买服务器的基本信息,点击<strong>KiwiVM Control Panel</strong><br><img src="/img/201701093.png" alt="my services"></p>
</li>
<li><p>Main Control 可以看到该服务器的基本信息, 以及进行<strong>重启关机开机</strong>等操作<br><img src="/img/201701092.png" alt="控制面板"></p>
</li>
<li><p>初始配置是Centos的系统,我是使用Ubuntu,所以先<strong>点击stop进行关机</strong>,接着进入Install new OS菜单选择自己熟悉的<strong>操作系统进行安装</strong>.可以看到,搬瓦工只支持Ubuntu和Centos,并不支持windows系统<br><img src="/img/201701095.png" alt="安装镜像"></p>
</li>
<li><p>等到安装完成之后,就可以<strong>点击Root shell-interactve</strong>, 直接进入服务器的<strong>shell终端</strong><br><img src="/img/201701094.png" alt="进入终端"></p>
</li>
<li><p>输入 passwd root 可以更改root用户密码<br><img src="/img/201701096.png" alt="终端界面"></p>
</li>
<li><p>拿到手之后先运行以下两条命令进行更新</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$sudo apt-get update</div><div class="line">$ sudo apt-get upgrade</div></pre></td></tr></table></figure></li>
<li>安装<strong>shadowsocks-python</strong>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install python-setuptools python-dev build-essential </div><div class="line"># python包管理</div><div class="line">$ sudo easy_install pip</div><div class="line"># python包下载</div><div class="line">$ pip install shadowsocks</div></pre></td></tr></table></figure></li>
<li>不出意外的话会出现成功安装的提示,接下来新建配置文件.不熟悉vi编辑器基本操作可以<a href="http://c.biancheng.net/cpp/html/2735.html" target="_blank" rel="external">进来扫盲</a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /etc/shadowsocks.json</div></pre></td></tr></table></figure></li>
<li>在配置文件中写入以下内容  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:vps的ip,</div><div class="line">    &quot;server_port&quot;:443, #服务器端口</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;认证密码&quot;,</div><div class="line">    &quot;timeout&quot;:600, #超时设置</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot; #加密方式</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>保存后启动ss服务  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sserver -c /etc/shadowsocks.json -d start</div><div class="line"># 关闭ss服务指令:</div><div class="line">$ ssserver -d stop</div></pre></td></tr></table></figure>
到此,服务器端的配置已经完毕</li>
</ul>
<h4 id="客户端配置连接"><a href="#客户端配置连接" class="headerlink" title="客户端配置连接"></a>客户端配置连接</h4><ul>
<li><p>Linux客户端: 这篇<a href="http://www.iyingsuo.com/android-shadowsocks-tutorials.html" target="_blank" rel="external">教程</a>已经详细介绍了Ubuntu上的配置方法,亲测有效,其他Linux系统同理,改一下命令就行了</p>
</li>
<li><p>ios客户端: 到App store下载<strong>ShadowTunnel</strong>(目前免费,不过开发团队说接下来会开始收费喔,抓紧下载吧)进行连接,同样亲测有效<br><img src="/img/201701098.png" width="330" height="500" alt="ShadowTunnel---IOS" align="center"></p>
</li>
<li><p>Android客户端: 下载<strong>影梭</strong>,<a href="http://www.iyingsuo.com/android-shadowsocks-tutorials.html" target="_blank" rel="external">官方使用说明和apk地址</a>,亲测有效<br><img src="/img/201701097.png" width="330" height="500" alt="影梭---Android" align="center"></p>
</li>
<li><p>Windows客户端: <a href="/img/201701091.png">官方教程</a>,这个没有测试过,等你告诉我效果hhh</p>
</li>
</ul>
<h4 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h4><p>  顺利的话,打开浏览器就能看到下面这个美丽的画面啦,如果在操作中遇到问题,欢迎留言,我会在第一时间回复你的 ^_^<br>  <img src="/img/201701099.png" alt=""> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算是年度读书总结 ?]]></title>
      <url>http://blog.wususu.cn/2016/12/31/%E7%AE%97%E6%98%AF%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%E5%90%A7/</url>
      <content type="html"><![CDATA[<h4 id="趁着2016还没走-赶紧发出最后一篇记录"><a href="#趁着2016还没走-赶紧发出最后一篇记录" class="headerlink" title="趁着2016还没走, 赶紧发出最后一篇记录"></a>趁着2016还没走, 赶紧发出最后一篇记录</h4><p>走着走着, 不知不觉已经踩到2016的尾巴, 仅仅总结一下自己这一年的技术之路.<br>同时也希望2017能更深入学习探索, 接触更美的东西.</p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍:"></a>书籍:</h4><ul>
<li>Python 基础教程</li>
<li>Python 网络技术采集</li>
<li>PHP 与MySQL Web 开发</li>
<li>PHP 编程实战</li>
<li>Learning PHP &amp; MySQL</li>
<li>java 核心技术卷一</li>
<li>Head First Java</li>
<li>jQuery 基础教程</li>
<li>jQuery CookBook</li>
<li>鸟哥的私房菜系列</li>
</ul>
<h4 id="实战项目"><a href="#实战项目" class="headerlink" title="实战项目:"></a>实战项目:</h4><ul>
<li>学校几个学院, 兼职猫, 赶集网等的求职信息采集</li>
<li>接入图灵机器人的微信机器人</li>
<li>基于ThinkPHP的选课系统(界面简陋至极)</li>
<li>重写一个移动app后台对微信推文采集的爬虫系统, 提供识别验证码机制</li>
<li>基于Flask微信推文爬虫的webapp, 方便浏览多个公章号文章</li>
<li>基于ThinkPHP的二手书发布平台</li>
<li>基于鸢尾花花瓣信息的回归方程三维迭代</li>
</ul>
<h4 id="一些话"><a href="#一些话" class="headerlink" title="一些话:"></a>一些话:</h4><p>2016 这一年的学习确实学到了很多知识, 但学得越多接触的世界越大, 愈发的感觉自己渺小,目前很多的技术都是基本了解, 掌握还不够深入.接下来要进一步研究学习, Keep on Geek.<br>By the way, 表扬一下自己, 改掉了熬夜的习惯<br>大二下, 加油 ~<br>哈哈, 去看演唱会啦, 对了, 我要当谁的歌迷呢 ~ </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手拉手学Ajax]]></title>
      <url>http://blog.wususu.cn/2016/12/10/%E6%89%8B%E6%8B%89%E6%89%8B%E5%AD%A6Ajax/</url>
      <content type="html"><![CDATA[<h4 id="Ajax-Asynchronous-JavaScript-and-XML-介绍"><a href="#Ajax-Asynchronous-JavaScript-and-XML-介绍" class="headerlink" title="Ajax(Asynchronous JavaScript and XML)介绍"></a>Ajax(Asynchronous JavaScript and XML)介绍</h4><p>Ajax其实就是一种不需要刷新页面就可以向后台请求数据的方法.实现了异步获取数据 </p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p> 主要有以下几种调用方法, 其中$.ajax()是最为底层的调用, 其余都是对jQuery.ajax的封装:</p>
<ul>
<li>$.ajax([url], options) </li>
<li>$.get(url, [data], [callback], [returnType])</li>
<li>$.post(url, [data], [callback], [returnType])</li>
<li>$getJSON(url, [data], [callback])</li>
<li>$getScript(url, [callback])</li>
<li>.load(url, [data], [callback])</li>
</ul>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p> 需要比较复杂的处理时还是要用$.ajax()比较方便, 所以就只介绍$.ajax()这种方法, 其他的调用方式可以到<a href="http://api.jquery.com/category/ajax/" target="_blank" rel="external">jQuery官网查看手册</a> </p>
<ul>
<li>使用的一般格式:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//其中url为必须, 其余可选</div><div class="line">$.ajax(</div><div class="line">	url: String  //地址,</div><div class="line">	type: String  //请求类型(&apos;GET&apos;/&apos;POST&apos;)</div><div class="line">	async: Boolean  //是否异步, 默认为true</div><div class="line">	data: object/String/Array  //发送的参数</div><div class="line">	dataType: String  //接收的数据类型</div><div class="line">	beforeSend: func  //预处理函数</div><div class="line">	success: func  //成功的回调函数</div><div class="line">	error: func  //失败的回调函数</div><div class="line">	complete: func  //完成的回调函数, 不管成功失败, 结束后立即调用这个回调函数</div><div class="line">	timeout: Number  //设置连接超时时间 </div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul>
<li>打铁趁热, 现在就用$.ajax()和php来实现一个移动webapp的登录功能:</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery 学习记录]]></title>
      <url>http://blog.wususu.cn/2016/11/29/jQuery-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="Selecting-Elements"><a href="#Selecting-Elements" class="headerlink" title="Selecting Elements"></a>Selecting Elements</h2><ul>
<li><h3 id="Selecting-direct-child-elements"><a href="#Selecting-direct-child-elements" class="headerlink" title="Selecting direct child elements"></a>Selecting direct child elements</h3><ol>
<li><p>select all anchor elements that reside directly beneath list items, you could use this selector: li &gt; a. All anchors that <strong>exist directly</strong> beneath list iteams.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul id="nav"&gt;</div><div class="line">	&lt;li&gt;&lt;a href="#anchor1"&gt;Anchor 1&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;li&gt;&lt;a href="#anchor2"&gt;Anchor 2&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;li&gt;&lt;span&gt;&lt;a href="#anchor3"&gt;Anchor 3&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;script&gt;</div><div class="line">jQuery('#nav li &gt; a');</div><div class="line">//this will select two elements as expect</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>select all direct children</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jQuery(&apos;#content&apos;).children(); == jQuery(&apos;#content &gt; *&apos;);</div><div class="line">//the first one run faster than the other</div></pre></td></tr></table></figure>
<p>it also can filter the result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery(&apos;#content&apos;).children(&apos;p&apos;);</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="Selecting-specific-siblings"><a href="#Selecting-specific-siblings" class="headerlink" title="Selecting specific siblings"></a>Selecting specific siblings</h3><ol>
<li><p>use the adjacent sibling combinator(+)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;content&quot;&gt;</div><div class="line">	&lt;h1&gt;Main title&lt;/h1&gt;</div><div class="line">	&lt;h2&gt;Section title&lt;/h2&gt;</div><div class="line">	&lt;p&gt;Some content...&lt;/p&gt;</div><div class="line">	&lt;h2&gt;Section title&lt;/p&gt;</div><div class="line">	&lt;p&gt;More content&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">	jQuery(&apos;h1 + h2&apos;);</div><div class="line">//Selects all the h2 tags that immediately follow h1   </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>use <strong>siblings()</strong> to select and filter all siblings of an elements </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jQuery(&apos;h1&apos;).siblings(&apos;h2, h3, p&apos;)</div><div class="line">//Select all h2 h3 and p elements that are siblings of h1</div></pre></td></tr></table></figure>
</li>
<li><p>the <strong>nextALL()</strong> method select all the siblings elements behind an elements, it also accept a selector to filter the selection</p>
</li>
<li><p>siblings combinator(~), work like (+)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jQuery(&apos;li.selected ~ li&apos;)</div><div class="line">// all li immediately follow &lt;li class = &quot;selected&quot;&gt;&lt;/li&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><h3 id="Selecting-elements-by-index-order"><a href="#Selecting-elements-by-index-order" class="headerlink" title="Selecting elements by index order"></a>Selecting elements by index order</h3></li>
</ul>
<ul>
<li><h3 id="Faster-Simpler-More-Fun"><a href="#Faster-Simpler-More-Fun" class="headerlink" title="Faster, Simpler, More Fun"></a>Faster, Simpler, More Fun</h3><ol>
<li><p>What’s Wrong with $(this)<br>面向对象编程时, this可以指向对象(等价于python 的self)<br>事件中可以作为属性, 指向一个元素(标签)<br>注: 谁调用函数, this就指向谁.在直接使用的函数(不是作为对象的操作方法)里面, this是window对象, 要先用js变量将其保存.</p>
</li>
<li><p>Removing Redundant Repetition<br>$.toggle(Boolean) 控制标签的显示/隐藏<br>.change() –值(回车才显示)<br>.keyup() –输入(不用回车)<br>.bind(事件, handler) –绑定事件与事件处理<br>.trigger() –触发选中元素的指定事件</p>
</li>
<li><p>Formatting your jQuery Chains<br>每个方法拆分到每一行, 对同意对象的操作保持同一缩进</p>
</li>
<li><p>Borrowing Code from Other Libraries<br>在你的jQuery中增加一个函数: eg:jQuery.fn.addfunction = function(){};</p>
</li>
<li><p>Writing a Custom Iterator<br>每秒显示一个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;span class=&quot;reveal&quot;&gt;Ready?&lt;/span&gt;</div><div class="line">&lt;span class=&quot;reveal&quot;&gt;On your Mark!&lt;/span&gt;</div><div class="line">&lt;span class=&quot;reveal&quot;&gt;Get set!&lt;/span&gt;</div><div class="line">&lt;span class=&quot;reveal&quot;&gt;Go!&lt;/span&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        jQuery.slowEach = function (array, interval, callback) &#123;</div><div class="line">            if (! array.length) return ;</div><div class="line">            var i = 0;</div><div class="line"></div><div class="line"></div><div class="line">            function next() &#123;</div><div class="line">                if (callback.call( array[i], i, array[i] ) !== false)&#123;</div><div class="line">                    if (++i &lt; array.length)&#123;</div><div class="line">                        setTimeout (next, interval);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            next();</div><div class="line">            return array;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        jQuery.fn.slowEach = function (interval, callback) &#123;</div><div class="line">            return jQuery.slowEach(this, interval, callback );</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        $(&apos;.reveal&apos;).hide();</div><div class="line">        $(&apos;.reveal&apos;).slowEach(1000, function () &#123;</div><div class="line">            $(this).show();&#125;);	</div><div class="line">    </div></pre></td></tr></table></figure>
<p>注: callback函数通过.call()增加一个参数设置其作用的对象, 并调用.</p>
</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pdo的使用]]></title>
      <url>http://blog.wususu.cn/2016/10/18/pdo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>PHP 数据对象 （PDO） 扩展为PHP访问数据库定义了一个轻量级的一致接口。实现 PDO 接口的每个数据库驱动可以公开具体数据库的特性作为标准扩展功能。 注意利用 PDO 扩展自身并不能实现任何数据库功能；必须使用一个 具体数据库的 PDO 驱动 来访问数据库服务。</p>
<p>PDO 提供了一个 数据访问 抽象层，这意味着，不管使用哪种数据库，都可以用相同的函数（方法）来查询和获取数据。 PDO 不提供 数据库 抽象层；它不会重写 SQL，也不会模拟缺失的特性。如果需要的话，应该使用一个成熟的抽象层。</p>
<p>从 PHP 5.1 开始附带了 PDO，在 PHP 5.0 中是作为一个 PECL 扩展使用。 PDO 需要PHP 5 核心的新 OO 特性，因此不能在较早版本的 PHP 上运行。</p>
<h4 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h4><ul>
<li><figure class="highlight plain"><figcaption><span>lang: php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$type = &apos;mysql&apos;;</div><div class="line">$host = &apos;127.0.0.1&apos;;</div><div class="line">$port =&apos;3306&apos;;</div><div class="line">$db = &apos;wechat_article&apos;;</div><div class="line">$user = &apos;root&apos;;</div><div class="line">$pw = &apos;root&apos;;</div><div class="line">$charset = &apos;utf8&apos;;</div><div class="line">$dsn = &quot;$type:host=$host;post=$port;dbname=$db;charset=$charset&quot;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><ul>
<li><figure class="highlight plain"><figcaption><span>lang: php</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    $conn = new \PDO($dsn, $user, $pw);</div><div class="line">&#125;catch (Exception $e)&#123;</div><div class="line">    die(&apos;连接失败&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>建立持久化连接<br>只需改动一处<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$pdo = <span class="keyword">new</span> \PDO($dsn, $username, $password, <span class="keyword">array</span>(\PDO::ATTR_PERSISTENT =&gt; <span class="keyword">true</span>));</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul>
<li><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$cur = $conn-&gt;query(<span class="string">'select title from article'</span>);</div><div class="line"><span class="keyword">while</span> ($row = $cur-&gt;fetch()) &#123;</div><div class="line">    var_dump($row[<span class="string">'title'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>也可以这样查询<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$cur = $conn-&gt;prepare(<span class="string">'select title from article'</span>);</div><div class="line">$flag = $cur-&gt;execute();</div><div class="line"><span class="keyword">if</span> ($flag === <span class="keyword">true</span>) &#123;</div><div class="line">    <span class="keyword">while</span> ($row = $cur-&gt;fetch()) &#123;</div><div class="line">        var_dump($row[<span class="string">'title'</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="使用占位符防御SQL注入"><a href="#使用占位符防御SQL注入" class="headerlink" title="使用占位符防御SQL注入"></a>使用占位符防御SQL注入</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无名占位符</span></div><div class="line">$stmt = $pdo-&gt;prepare(<span class="string">"SELECT * FROM TABLE WHRER username = ?"</span>);</div><div class="line">$stmt-&gt;execute(<span class="keyword">array</span>($_POST[<span class="string">'username'</span>]));</div><div class="line"></div><div class="line"><span class="comment">// 命名的占位符</span></div><div class="line">$stmt = $pdo-&gt;prepare(<span class="string">"SELECT * FROM TABLE WHERE username = :user"</span>);</div><div class="line">$stmt = $pdo-&gt;bindParam(<span class="string">':user'</span>, $_POST[<span class="string">'username'</span>]);</div><div class="line">$stmt-&gt;execute();</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h4><ul>
<li><p>这是文档给的例子</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$dbh = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=test'</span>, $user, $pass);</div><div class="line"><span class="comment">// 在此使用连接</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 现在运行完成，在此关闭连接</span></div><div class="line">$dbh = <span class="keyword">null</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>运行以下代码:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $conn = <span class="keyword">new</span> \PDO($dsn, $user, $pw);</div><div class="line">&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'连接失败'</span>);</div><div class="line">&#125;</div><div class="line">sleep(<span class="number">7</span>);</div><div class="line">$cur = $conn-&gt;query(<span class="string">'select title from article'</span>);</div><div class="line">$cur-&gt;closeCursor();</div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line">sleep(<span class="number">20</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>检查数据库连接, 状态如下:<br><img src="/img/201610181.png" alt=""><br>可以看出, 启动这一连接线程后, 关闭连接, 连接仍然存活20秒, pdo并没有实现断开的方法.</li>
<li>强制断开连接<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sleep(<span class="number">7</span>);</div><div class="line">$cur = $conn-&gt;query(<span class="string">'select title from article'</span>);</div><div class="line">$cur = <span class="keyword">null</span>; <span class="comment">// 强制关闭连接</span></div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line">sleep(<span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/img/201610182.png" alt="语句执行完毕后连接被强制关闭"></p>
<ul>
<li>也可以使用这种方法强制关闭<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$cur = $conn-&gt;query(<span class="string">'select title from article'</span>);</div><div class="line">$conn-&gt;query(<span class="string">'KILL CONNECTION_ID();'</span>);</div><div class="line">$conn = <span class="keyword">null</span>;</div><div class="line">sleep(<span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="事务参照官方文档"><a href="#事务参照官方文档" class="headerlink" title="事务参照官方文档"></a>事务参照官方文档</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP学习资源]]></title>
      <url>http://blog.wususu.cn/2016/10/17/PHP%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>-&gt;php 学习资源</p>
<h3 id="php之道"><a href="#php之道" class="headerlink" title="php之道"></a><a href="http://www.phptherightway.com" target="_blank" rel="external">php之道</a></h3><h3 id="鸟哥博客"><a href="#鸟哥博客" class="headerlink" title="鸟哥博客"></a><a href="http://www.laruence.com/php" target="_blank" rel="external">鸟哥博客</a></h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PHP 中的抽象类和接口]]></title>
      <url>http://blog.wususu.cn/2016/10/17/PHP-%E4%B8%AD%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3(%E8%BD%AC)/</url>
      <content type="html"><![CDATA[<p>-&gt;PHP 中的抽象类和接口, 详解</p>
<p>*<a href="http://blog.csdn.net/sunlylorn/article/details/6124319" target="_blank" rel="external"> PHP中的 抽象类（abstract class）和 接口（interface）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阅舍一聚类阅读webapp实现]]></title>
      <url>http://blog.wususu.cn/2016/10/13/%E9%98%85%E8%88%8D%E4%B8%80%E8%81%9A%E7%B1%BB%E9%98%85%E8%AF%BBwebapp%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>-&gt; 基于python flask 的聚类阅读webapp<br><a id="more"></a></p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面:"></a>写在前面:</h1><p>本来是数据结构的课程设计作业, 一不小心就写成了web应用. 于是就决定继续维护优化, 希望能收到改进的建议.</p>
<h1 id="阅舍V1-0"><a href="#阅舍V1-0" class="headerlink" title="阅舍V1.0"></a>阅舍V1.0</h1><p><img src="/img/2016101301.png" alt="架构">  </p>
<h2 id="web爬虫逻辑"><a href="#web爬虫逻辑" class="headerlink" title="web爬虫逻辑:"></a>web爬虫逻辑:</h2><figure class="highlight plain"><figcaption><span>lang: python</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id = &apos; &apos;                                             #公众号id</div><div class="line">spy = UpdateSpider()</div><div class="line">result = spy.search_id(id)              #search_id方法获取该公众号文章信息</div><div class="line">						     #根据微信公众号id搜索公众号文章信并进行抓取入库</div></pre></td></tr></table></figure>
<p> 使用crontab设置定时任务定时轮询数据库中的公众号信息, 并使用md5对文章link与时间进行编码设置唯一索引</p>
<h2 id="数据存储层"><a href="#数据存储层" class="headerlink" title="数据存储层:"></a>数据存储层:</h2><p>数据表author_user存放用户储存的阅读号id, 昵称, 状态, 阅读平台等<br>数据表article 存放文章信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">-- 表的结构 `author_user`</div><div class="line"></div><div class="line">CREATE TABLE IF NOT EXISTS `author_user` (</div><div class="line">  `id` int(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</div><div class="line">  `author_id` varchar(<span class="number">50</span>) NOT NULL,</div><div class="line">  `username` varchar(<span class="number">20</span>) CHARACTER SET latin1 NOT NULL,</div><div class="line">  `create_time` datetime DEFAULT NULL,</div><div class="line">  `status` int(<span class="number">11</span>) DEFAULT <span class="string">'0'</span>,</div><div class="line">  `type` int(<span class="number">11</span>) NOT NULL,</div><div class="line">  `unique` varchar(<span class="number">200</span>) CHARACTER SET latin1 NOT NULL,</div><div class="line">  `author_name` varchar(<span class="number">55</span>) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  UNIQUE KEY `unique` (`unique`)</div><div class="line">) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=<span class="number">25</span> ;</div><div class="line"></div><div class="line"></div><div class="line">-- 表结构 `article`                </div><div class="line"></div><div class="line"></div><div class="line">CREATE TABLE IF NOT EXISTS `article` (</div><div class="line">  `id` int(<span class="number">10</span>) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `title` char(<span class="number">55</span>) NOT NULL,</div><div class="line">  `author` char(<span class="number">30</span>) NOT NULL,</div><div class="line">  `url` varchar(<span class="number">255</span>) NOT NULL,</div><div class="line">  `post_time` datetime DEFAULT NULL,</div><div class="line">  `into_db` datetime DEFAULT NULL,</div><div class="line">  `description` varchar(<span class="number">300</span>) DEFAULT NULL,</div><div class="line">  `cover_img` varchar(<span class="number">250</span>) NOT NULL,</div><div class="line">  `md5` varchar(<span class="number">250</span>) NOT NULL,</div><div class="line">  `article_id` char(<span class="number">100</span>) NOT NULL,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  UNIQUE KEY `md5` (`md5`)</div><div class="line">) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=<span class="number">797</span> ;</div></pre></td></tr></table></figure>
<h2 id="数据管理层"><a href="#数据管理层" class="headerlink" title="数据管理层:"></a>数据管理层:</h2><p>  为了快速开发,用户录入阅读号类型(目前只支持微信公众号)与ID,直接入库,在执行定时任务的时候会对其进行爬取,根据爬取结果进行判断,写入该阅读号的状态判断(通过验证, 查无该阅读号) .同时对通过验证的阅读号进行最新文章进行抓取并入库.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">get_author()                                     <span class="comment">#获取数据库中的阅读号ID</span></div><div class="line">update_author_name(id, name)     <span class="comment">#验证通过后记录阅读号昵称</span></div><div class="line">chang_status(id, status)                   <span class="comment">#更改阅读号状态</span></div><div class="line">into_db(lists)            <span class="comment">#文章信息入库</span></div></pre></td></tr></table></figure></p>
<h2 id="数据展示层"><a href="#数据展示层" class="headerlink" title="数据展示层:"></a>数据展示层:</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><ol>
<li>首页展示文章<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="meta">@app.route('/page/&lt;int:p&gt;/')</span></div><div class="line"><span class="meta">@app.route('/page/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(p=<span class="number">1</span>)</span></span></div></pre></td></tr></table></figure></li>
<li><p>阅读号类型与ID表单页面及post数据处理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/post/', methods=['POST', 'GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></div></pre></td></tr></table></figure>
</li>
<li><p>获取该用户收藏的文章并且展示</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route('/myread/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myread</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorUser</span><span class="params">(db.Model)</span></span></div></pre></td></tr></table></figure>
<h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><p>base.html            基础页面模板<br>author_form.html         添加阅读号页面模板<br>my_read.html                收藏的阅读号页面模板<br>pagecreate.html        文章展示页面模板</p>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/img/201610141.png" alt=""><br><img src="/img/201610142.png" alt=""><br><img src="/img/201610143.png" alt=""><br><img src="/img/201610144.png" alt=""> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flask学习记录]]></title>
      <url>http://blog.wususu.cn/2016/10/10/Flask%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>-&gt;Flask 学习记录<br><a id="more"></a></p>
<h3 id="1-python3-pymysql-flask-sqlalchemy"><a href="#1-python3-pymysql-flask-sqlalchemy" class="headerlink" title="1. python3 + pymysql + flask-sqlalchemy"></a>1. python3 + pymysql + flask-sqlalchemy</h3><p>问题:  无法连接mysql<br>连接路由: mysql://username:password@server/db<br>解决方法: 将连接路由改为,  mysql+pymysql://username:password@server/db</p>
<h3 id="2-通用分页器"><a href="#2-通用分页器" class="headerlink" title="2. 通用分页器"></a>2. 通用分页器</h3><p>问题: sqlalchemy有一个基于model的内置分页器, 当数据表不是model创建时, 就需要自己写个分页器了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 分页器</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pagination</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page, per_num, data)</span>:</span></div><div class="line">        self.page = page                                     <span class="comment"># 当前页面</span></div><div class="line">        self.per_num = per_num                       <span class="comment"># 每页显示数目</span></div><div class="line">        self.iterable = data                                <span class="comment"># 显示的数据</span></div><div class="line">        self.total = len(data)                             <span class="comment"># 总数据数</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total_page</span><span class="params">(self)</span>:</span> </div><div class="line">        <span class="keyword">return</span> int(math.ceil(self.total/self.per_num))</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_prev</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.page &gt; <span class="number">1</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_next</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.page &lt; self.total_page</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pager</span><span class="params">(self)</span>:</span>                                                   <span class="comment"># 页面列表</span></div><div class="line">        <span class="keyword">return</span> list(range(<span class="number">1</span>, self.total_page+<span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">items</span><span class="params">(self)</span>:</span>                                                    <span class="comment"># 获取当前页面的条目</span></div><div class="line">        index = self.page - <span class="number">1</span></div><div class="line">        start = index * self.per_num</div><div class="line">        end = start + self.per_num</div><div class="line">        <span class="keyword">return</span> self.iterable[start: end]</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># controller</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span><span class="params">(p=<span class="number">1</span>)</span>:</span></div><div class="line">    conn = connect(<span class="string">'127.0.0.1'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>, <span class="string">'wechat_article'</span>)                        </div><div class="line">    sql = <span class="string">"select * from article ORDER by -post_time"</span></div><div class="line">    result = get(conn, sql)                                                                                       </div><div class="line">    page_list = Pagination(p, <span class="number">10</span>, result)                                                             </div><div class="line">    has_next = page_list.has_next</div><div class="line">    has_prev = page_list.has_prev</div><div class="line">    pager = page_list.pager                                                                                 <span class="comment"># 页数列表</span></div><div class="line">    page = page_list.page                                                                                    <span class="comment"># 当前页数</span></div><div class="line">    data = page_list.items                                                                                   <span class="comment"># 当前页面数据</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'pagecreate.html'</span>,</div><div class="line">                           has_next=has_next,</div><div class="line">                           has_prev=has_prev,</div><div class="line">                           pager=pager,</div><div class="line">                           page=page,</div><div class="line">                           data=data)</div></pre></td></tr></table></figure>
<p>view<br><img src="/img/201610152.png" alt="view"><br>效果图<br><img src="/img/201610151.png" alt="效果图"><br>目前有一个问题: 无法根据页码数进行省略,只能限制展示的数据总数</p>
<h3 id="3-会话控制"><a href="#3-会话控制" class="headerlink" title="3.会话控制"></a>3.会话控制</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[thinkPHP问题记录]]></title>
      <url>http://blog.wususu.cn/2016/10/09/thinkPHP%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>-&gt; 学习thinkPHP过程中的问题记录<br><a id="more"></a></p>
<h3 id="文件权限问题-渲染模板的时候-打开页面错误"><a href="#文件权限问题-渲染模板的时候-打开页面错误" class="headerlink" title="文件权限问题:渲染模板的时候, 打开页面错误."></a>文件权限问题:渲染模板的时候, 打开页面错误.</h3><p><img src="/img/201610091.png" alt=""><br>  控制器方法:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;assign(<span class="string">'name'</span>, <span class="string">'wususu'</span>);</div><div class="line">    <span class="keyword">$this</span>-&gt;display();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>  模板视图:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello &#123;$name&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    hello, &#123;$name&#125;!</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><br>  原因: 文件缺少执行权限<br>  解决:<br>ls -l + name查看文件权限<br>chmod -R 777 + name 赋予777权限</p>
<h3 id="数据更新失败-更新数据无法保存"><a href="#数据更新失败-更新数据无法保存" class="headerlink" title="数据更新失败:更新数据无法保存"></a>数据更新失败:更新数据无法保存</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$Form = D(<span class="string">'Course'</span>);</div><div class="line"><span class="keyword">if</span> ($Form-&gt;create())&#123;</div><div class="line">	$result = $Form-&gt;save();</div><div class="line">      	<span class="keyword">if</span>($result)&#123;</div><div class="line">         	<span class="keyword">$this</span>-&gt;success(<span class="string">'操作成功'</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">	      <span class="keyword">$this</span>-&gt;error(<span class="string">'写入失败'</span>);</div><div class="line">       	&#125;</div><div class="line">     	&#125;</div></pre></td></tr></table></figure>
<p>  原因: 使用create方法, 表单中必须包含一个以主键为名称的隐藏域，才能完成保存操作。<br>  解决办法:<br>表单加入一句<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"course_id"</span> <span class="attr">value</span>=<span class="string">"&#123;$old.course_id&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[青友会视频培训 (一)]]></title>
      <url>http://blog.wususu.cn/2016/08/13/%E9%9D%92%E5%8F%8B%E4%BC%9A%E8%A7%86%E9%A2%91%E5%9F%B9%E8%AE%AD%E4%B8%80/</url>
      <content type="html"><![CDATA[<h3 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h3><p>电脑要求：至少i5+4G(建议加个内存条上8G)</p>
<h3 id="二"><a href="#二" class="headerlink" title="二."></a>二.</h3><p>Pr：<br>下载地址：<a href="https://yunpan.cn/Oc6NuwbjP5J2Ex" target="_blank" rel="external">https://yunpan.cn/Oc6NuwbjP5J2Ex</a> <a id="more"></a> 访问密码 6ee0<br>破解：<a href="http://www.yudouyudou.com/ziyuanxiazai/ruanjianziyuan/473.html" target="_blank" rel="external">http://www.yudouyudou.com/ziyuanxiazai/ruanjianziyuan/473.html</a><br>官方教程：<a href="https://yunpan.cn/Oc6NVDutCdyakv" target="_blank" rel="external">https://yunpan.cn/Oc6NVDutCdyakv</a>  访问密码 4e61（反正我懒得去看）<br>Ae：</p>
<p>下载与破解：<a href="http://blog.sina.com.cn/s/blog_6306f2c60102evi1.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_6306f2c60102evi1.html</a><br>Ae模板地址：<a href="http://www.lookae.com/after-effects/" target="_blank" rel="external">http://www.lookae.com/after-effects/</a><br>            <a href="http://www.xcmoban.com/plus/list.php?tid=1" target="_blank" rel="external">http://www.xcmoban.com/plus/list.php?tid=1</a></p>
<h3 id="三"><a href="#三" class="headerlink" title="三."></a>三.</h3><p>Pr我主要用来对视频的整合编辑。Ae用模板来制作炫酷的特效和视频/图片框架，复杂的模板比较吃内存。<br>基本上我们使用的是这两个软件的一部分功能而已，秉承着够用的原则，推荐的学习方式是在做中学，通过动手制作视频学习使用这些软件。</p>
<h4 id="制作路线："><a href="#制作路线：" class="headerlink" title="制作路线："></a>制作路线：</h4><ol>
<li>确定主题：想要表达什么，定下风格</li>
<li>架构视频，划分模块: 开场/内容分块/高潮/落幕/…</li>
<li>背景音乐：音乐是很重要的组成部分，一个糟糕的视频，只要背景音乐选取恰当，音频剪辑与视频节奏匹配，都能使得观看者共鸣。</li>
<li>分块制作：将各个模块制作并渲染</li>
<li>整合模块    <h3 id="四"><a href="#四" class="headerlink" title="四."></a>四.</h3>Pr的简单操作：<br>打开后选择新建项目：<br> <img src="/img/20168131.png" alt="新建项目"><br>接下来更改项目位置，其他默认就行了：<br><img src="/img/20168132.png" alt="新建项目"><br>新建序列，同样默认，后面加入素材会提示变更比例：<br><img src="/img/20168133.png" alt="新建序列"><br>时间轴会有新序列，上半部分是图片与视频区，下半部分是音频区，左边一排为工具栏，将素材区域拖拉到此处可以进行视频编辑,记得Ctrl+z(撤回)是非常有用的<br><img src="/img/20168134.png" alt="序列区"><br>这个是预览区，调好时间轴的进程线后可以在此区域进行预览<br><img src="/img/20168135.png" alt="预览区"><br>这个是素材区域，将素材拖到此区域，就可以完成素材导入（菜单栏的文选项也可进行导入操作）<br><img src="/img/20168136.png" alt="素材"><br>这个地方有可以对视频添加特效的素材，特效可以下载扩充<br><img src="/img/20168137.png" alt="特效"><br>每个人的工作区设置各不相同，可以在菜单栏-&gt;窗口处进行增添<br><img src="/img/20168138.png" alt="工作区"><br>完成视频编辑后，菜单栏 文件-&gt; 导出 -&gt; 媒体 导出渲染，记得选择H.264格式的，这样视频不会太大，画质压缩也可以接受。<br><img src="/img/20168139.png" alt="导出"><br><img src="/img/201681310.png" alt="渲染设置">    <h3 id="五"><a href="#五" class="headerlink" title="五."></a>五.</h3>这篇博文比较短,只是讲了一些基本操作,我更希望的是六位同学能在自己的摸索中get到新技能,通过动手,查看官方使用文档,查阅文献与视频来学会怎么制作一个视频,掌握自学技巧.建议是遇到问题或者想要使用某个不会用的特效的时候有针对性地去查去学,死啃教程是很笨的一种做法.<br>好吧,说到底是我懒 - -!</li>
</ol>
<p>-&gt; 附带作品:<br>-&gt; <a href="http://v.qq.com/x/page/a01830ep9jd.html" target="_blank" rel="external">第一次制作的视频</a><br>-&gt; <a href="http://v.qq.com/x/page/k0183o6g740.html" target="_blank" rel="external">宣传视频</a><br>-&gt; <a href="http://v.qq.com/x/page/d0183iexi8n.html" target="_blank" rel="external">新春视频</a><br>-&gt; <a href="http://v.qq.com/x/page/a01987xmxbx.html" target="_blank" rel="external">2016高考加油视频(合作)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用sftp与远程主机交互]]></title>
      <url>http://blog.wususu.cn/2016/07/28/%E4%BD%BF%E7%94%A8sftp%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<p> <em>简介</em><br>  sftp是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的加密方法。它类似于 ftp, 但它进行加密传输，比FTP有更高的安全性。<br><a id="more"></a></p>
<ul>
<li><p>连接远程主机:<br>例如主机IP: 123.456.78.90 或者域名: wususu.cn ,用户名: wususu<br>在命令行模式下: $sftp wususu@123.456.78.90 或者$sftp wususu@wususu.cn.<br>之后按提示输入密码</p>
</li>
<li><p>sftp&gt; get 远程主机下文件的路径   将文件保存到本地电脑的路径</p>
</li>
<li><p>sftp&gt; put 本地文件的路径 将文件版保存到远程主机的路径</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 连接远程服务器]]></title>
      <url>http://blog.wususu.cn/2016/07/28/Ubuntu-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p> 1.更新:<br>    $sudo apt-get update<br> 2.安装 ssh:<br>    $sudo apt-get install openssh-server<br>    <a id="more"></a><br> 3.启动ssh-server<br>    $ /etc/init.d/ssh restart<br> 4.确认工作:<br>    $netstat -tlp<br>  看到 tcp6 0 0 <em>:ssh </em>:* LISTEN -  说明已运行<br> 5.通过ssh登录服务器:<br>    $ssh -l 用户名 IP<br>  回车之后输入密码</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python下使用Redis]]></title>
      <url>http://blog.wususu.cn/2016/07/21/python%E4%B8%8B%E4%BD%BF%E7%94%A8Redis/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>  Redis 是完全开源免费的,高性能的key-value数据库。<br>  Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。<br>  <a id="more"></a><br>  Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。<br>  丰富的特性 – Redis支持 publish/subscribe, 通知, key 过期等等特性。<br>  说白了, redis就是个功能强大的存放在内存当中的键-值数据库</p>
<h2 id="python简单操作redis"><a href="#python简单操作redis" class="headerlink" title="python简单操作redis"></a>python简单操作redis</h2><ol>
<li><p>ubuntu安装redis:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">＃redis</div><div class="line"> sudo apt-get install redis-server</div><div class="line"></div><div class="line">＃默认配置文件在 </div><div class="line"> vi /etc/redis/redis.conf </div><div class="line"></div><div class="line">＃测试连接</div><div class="line"> redis-cli</div></pre></td></tr></table></figure>
</li>
<li><p>模块安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install redis</div></pre></td></tr></table></figure>
<p>或者也可以在Pycharm中安装:setting -&gt; Project -&gt; Project Interpreter 点击加号选择安装</p>
</li>
<li><p>使用连接池<br>使用连接池可以从池中生成连接,调用完成后将连接返还,提高执行效率<br>实现:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> import redis</div><div class="line"> pool = redis.ConnectionPool(host = &apos;127.0.0.1&apos;, port = 6397)     #创建一个连接池</div><div class="line"> r = redis.Redis(connection_pool = pool)   #连接到一个连接池</div><div class="line">r.set(&apos;key&apos;, &apos;value&apos;)</div><div class="line">r.get(&apos;key&apos;)</div><div class="line">r.keys()</div><div class="line">r.dbsize()  #当前数据库的数据数</div><div class="line"></div><div class="line">r.delete(&apos;key&apos;)</div><div class="line">r.save()   #数据写入磁盘</div><div class="line">r.flushdb()   #清空r中所有数据</div></pre></td></tr></table></figure>
<ol>
<li>设置key的过期时间:<br>两种类型的过期时间: 1) 指定从当前时间起的存活时间(有秒,毫秒两种)  2) 指定在某一个时间失效(明确年月日时分秒,若为过期时间,key会立即失效)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import datetime</div><div class="line">pool = redis.ConnectionPool(host = &apos;127.0.0.1&apos;, prot = 6379, db = 0)</div><div class="line">r = redis.StricRedis(connection_pool = pool)</div><div class="line">r.set(&apos;key1&apos;, &apos;value1&apos;)</div><div class="line">r.set(&apos;key2&apos;, &apos;value2&apos;)</div><div class="line">endtime = datetime.datetime(2016.8.1.10.2.12)</div><div class="line">r.expire(&apos;key1&apos;, 10)                               #10秒</div><div class="line">r.expireat(&apos;key2&apos;, endtime)                #2016年8月1日10:02:12</div><div class="line">##设置成功返回True 失败返回False</div></pre></td></tr></table></figure>
</li>
<li><p>pipeline(管道) 操作:<br>管道（pipeline）是redis在提供单个请求中缓冲多条服务器命令的基类的子类。它通过减少服务器-客户端之间反复的TCP数据库包，从而大大提高了执行批量命令的功能。<br><a href="http://weipengfei.blog.51cto.com/1511707/1215042" target="_blank" rel="external">相关链接</a></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DFA-确定有限状态自动机]]></title>
      <url>http://blog.wususu.cn/2016/07/19/DFA-%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      <content type="html"><![CDATA[<blockquote><p>确定有限状态自动机或确定有限自动机（英语：deterministic finite automation, DFA）是一个能实现状态转移的自动机对于一个给定的属于该自动机的状态和一个属于该自动机<br><a id="more"></a><br>字母表 {\displaystyle \Sigma } \Sigma 的字符，它都能根据事先给定的转移函数转移到下一个状态（这个状态可以是先前那个状态）。</p>
<footer><strong>Wiki</strong><cite><a href="https://zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA" target="_blank" rel="external">zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA</a></cite></footer></blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h3><p>  DFA的基本功能是可以通过event和当前的state得到下一个state，即event+state=nextstate,如下图所示,和数字逻辑电路的状态图类似:<br> <img src="/img/201607201.png" alt=""></p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用:"></a>应用:</h3><p>  DFA引用很广,例如敏感词语的过滤,也就是常说的和谐,将敏感词语替换成”**”,这次的项目需求是判断文本是否有敏感词,以此划分权值.</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路:"></a>实现思路:</h3><p>  1.将所有的敏感词语打包,建立一个字典树.<br>  2.依次遍历文本字符,进行判断</p>
<p> <strong>树结构:</strong></p>
<p><img src="/img/201607202.jpg" alt="结构图"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Node(object):</div><div class="line">    def __init__(self):</div><div class="line">        self.children = None</div><div class="line"></div><div class="line"># The encode of word is UTF-8</div><div class="line">class DFA():</div><div class="line">    def __init__(self):</div><div class="line">        self.root = Node()</div><div class="line">        self.keywords = []</div><div class="line"></div><div class="line">        path = &quot;keywords&quot;</div><div class="line">        fp = open(path,&apos;r&apos;)</div><div class="line">        for line in fp:</div><div class="line">            a = line[0:-1]</div><div class="line">            self.keywords.append(a)</div><div class="line">        print(self.keywords)</div><div class="line"></div><div class="line">    #构造敏感词字典树</div><div class="line">    def __add_word(self):</div><div class="line">        for word in self.keywords:</div><div class="line">            node = self.root</div><div class="line">            for i in range(len(word)):</div><div class="line">                if node.children == None:</div><div class="line">                    node.children = [&#123;&#125;,False]</div><div class="line">                    node.children[0][word[i]] = Node()</div><div class="line">                    node = node.children[0][word[i]]</div><div class="line">                    if i == len(word) - 1:</div><div class="line">                        node.children = [&#123;&#125;,True]</div><div class="line"></div><div class="line">                elif word[i] not in node.children[0].keys() and node.children!=None:</div><div class="line">                    node.children[0][word[i]] = Node()</div><div class="line">                    node = node.children[0][word[i]]</div><div class="line">                    if i == len(word) - 1 :</div><div class="line">                        node.children  = [&#123;&#125;, True]</div><div class="line">                else:</div><div class="line">                    node = node.children[0][word[i]]</div><div class="line">    </div><div class="line">    #查找敏感词</div><div class="line">    def search(self, message):</div><div class="line">        self.__add_word()</div><div class="line">        node = self.root</div><div class="line">        if node == None:</div><div class="line">            return</div><div class="line">        else:</div><div class="line">            i = j = 0</div><div class="line">            result = &apos;&apos;</div><div class="line">            while i &lt; len(message):</div><div class="line">                # print(message[i])</div><div class="line">                if node.children[1] == True:</div><div class="line">                    if result != &apos;的&apos;:     </div><div class="line">                        print(result)</div><div class="line">                    result = &apos;&apos;</div><div class="line">                    i = i - j + 1</div><div class="line">                    j = 0</div><div class="line">                if message[i] not in node.children[0].keys():</div><div class="line">                    # print(2)</div><div class="line">                    result = &apos;&apos;</div><div class="line">                    i = i - j + 1</div><div class="line">                    j = 0</div><div class="line">                elif message[i] in node.children[0].keys():</div><div class="line">                    # print(3)</div><div class="line">                    result = result + message[i]</div><div class="line">                    node = node.children[0][message[i]]</div><div class="line">                    j += 1</div><div class="line">                    i += 1</div><div class="line">                    continue</div><div class="line">                node = self.root</div><div class="line">        return</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    doc = &apos;&apos;   #测试文本</div><div class="line">    DFA().search(doc)</div><div class="line">    </div></pre></td></tr></table></figure>
<p>注: 代码还不是很好,等待完善,存在’的’问题,目前只能添加过滤条件的方式去除</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA#DFA.E4.B8.8E.E6.9C.89.E5.90.91.E5.9B.BE" target="_blank" rel="external">维基百科</a><br><a href="http://ahuaxuan.iteye.com/blog/336577" target="_blank" rel="external">相关博文</a><br><a href="http://blog.sina.com.cn/s/blog_7eaa03930102w36z.html" target="_blank" rel="external">相关博文</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Mojo-Weixin+图灵+python的微信机器人]]></title>
      <url>http://blog.wususu.cn/2016/07/17/%E5%9F%BA%E4%BA%8EMojo-Weixin-%E5%9B%BE%E7%81%B5-python%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA-1/</url>
      <content type="html"><![CDATA[<h2 id="主要分为三个模块"><a href="#主要分为三个模块" class="headerlink" title="主要分为三个模块: "></a>主要分为三个模块: </h2><p>一.微信交互模块: 这里我直接使用Mojo-Wexin进行模拟登录与数据交互<br>二.智能聊天模块: 这里采用的是图灵机器人<a id="more"></a><br>三.数据的交互模块: 采用python编写的脚本处理数据进行前两个模块的交互</p>
<hr>
<h2 id="一-微信交互"><a href="#一-微信交互" class="headerlink" title="一.微信交互"></a>一.微信交互</h2><p>  通过API通讯,具体查阅文档<a href="https://github.com/sjdy521/Mojo-Weixin" target="_blank" rel="external">Mojo-Weixin</a></p>
<h2 id="二-智能聊天"><a href="#二-智能聊天" class="headerlink" title="二.智能聊天"></a>二.智能聊天</h2><h5 id="这里使用的是图灵机器人首先要注册一个帐号获取机器人钥匙-地址用于通讯-secret用于数据的加密-这里纯粹玩玩-就不用了-Mojo是通过模拟网页微信登录-所以要用API接入文档"><a href="#这里使用的是图灵机器人首先要注册一个帐号获取机器人钥匙-地址用于通讯-secret用于数据的加密-这里纯粹玩玩-就不用了-Mojo是通过模拟网页微信登录-所以要用API接入文档" class="headerlink" title="这里使用的是图灵机器人首先要注册一个帐号获取机器人钥匙,地址用于通讯,secret用于数据的加密(这里纯粹玩玩,就不用了),Mojo是通过模拟网页微信登录,所以要用API接入文档"></a>这里使用的是图灵机器人首先要注册一个帐号获取机器人钥匙,地址用于通讯,secret用于数据的加密(这里纯粹玩玩,就不用了),Mojo是通过模拟网页微信登录,所以要用API接入文档</h5><p> <img src="/img/tulin.jpg" alt="图灵key"></p>
<h2 id="三-数据交互"><a href="#三-数据交互" class="headerlink" title="三.数据交互"></a>三.数据交互</h2><h4 id="废话不多说-上代码"><a href="#废话不多说-上代码" class="headerlink" title="废话不多说,上代码"></a>废话不多说,上代码</h4><p> 1.<strong>与机器人交互的函数块</strong></p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">def TuLin(say,userid):</div><div class="line">  msg = &#123;</div><div class="line">  &quot;key&quot;: &quot;图灵key&quot;,</div><div class="line">  &quot;info&quot;: say.encode(&apos;utf8&apos;),</div><div class="line">  &quot;userid&quot;: userid[2:]</div><div class="line">  &#125;</div><div class="line">  r = requests.post(url=&quot;访问地址&quot;,data=msg)</div><div class="line">  data = json.loads(r.text)</div><div class="line">  #聊天</div><div class="line">  if data[&apos;code&apos;] == 100000:</div><div class="line">      # print(data[&apos;text&apos;])</div><div class="line">      return data[&apos;text&apos;].replace(&apos;#&apos;,&apos;&apos;)</div><div class="line">  #新闻</div><div class="line">  elif data[&apos;code&apos;] == 302000:</div><div class="line">      xw_data = &apos;&apos;</div><div class="line">      s=0</div><div class="line">      print(data[&apos;text&apos;],data[&apos;list&apos;])</div><div class="line">      for xinwen in data[&apos;list&apos;]:</div><div class="line">          s+=1</div><div class="line">          xw_url  re.match(re.compile(u&apos;(^http://(.+)\.html)&apos;),xinwen[&apos;detailurl&apos;])</div><div class="line">          xw_url = xw_url.group(0)</div><div class="line">          xw_data = xw_data+&apos;\n&apos;+str(s)+&apos;、&apos;+ xinwen[&apos;article&apos;]+xw_url</div><div class="line">      return xw_data.replace(&apos;#&apos;,&apos;&apos;)</div><div class="line"></div></pre></td></tr></table></figure>
<p> 注意,发送文本字段若包含”#”,微信会自动过滤它及其后面的字段,这里我用 replace() 替换掉, 不同的返回码代表不同的类型,这里省去了部分代码</p>
<p>2.<strong>微信消息接收</strong></p>
<p>   使用flask模块监听Mojo-Weixin上报消息接口,接收群聊消息<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@app.route(&apos;/receive_message&apos;, methods=[&apos;POST&apos;])</div><div class="line">def Receive():</div><div class="line">    data = request.json</div><div class="line">    print(data)</div><div class="line">    #群消息交互</div><div class="line">    if GetValue(&quot;group&quot;,data) != False and robot_name in GetValue(&apos;content&apos;,data):</div><div class="line">        Group_contact(data)</div><div class="line">    return &apos;1&apos;</div></pre></td></tr></table></figure></p>
<p> 3.<strong>微信消息发送</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def Send(msg, g_id, sender_name):  </div><div class="line">    data = &apos;@&apos;+sender_name +&apos;\u2005\n&apos;+ str(msg)</div><div class="line">    url = WxG_url+&apos;send_group_message?id=&apos;+g_id+ &apos;&amp;content=&apos;+data</div><div class="line">    print(&apos;url:&apos;,data)</div><div class="line">    r = requests.get(url).json()</div><div class="line">    if r[&apos;code&apos;] != 0:</div><div class="line">        print(&apos;发送失败&apos;)</div><div class="line">        return False</div><div class="line">    return True</div></pre></td></tr></table></figure></p>
<p>  4.<strong>控制模块</strong><br>   控制模块起到了中介作用传递数据,在这里可以对数据进行筛选自定义,打造自己需要的功能.例如:通过聊天关键字’海贼王漫画’,机器人自动发送最新一集漫画链接..是不是很强大呢.<br>   注: GetValue 提取数据中对应键的值<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def Group_contact(data):</div><div class="line">  content = GetValue(&apos;content&apos;, data)</div><div class="line">  sender_id = GetValue(&apos;sender_id&apos;, data)</div><div class="line">  sender_name = GetValue(&apos;sender&apos;, data)</div><div class="line">  group_id = GetValue(&apos;group_id&apos;, data)</div><div class="line">  print(content)</div><div class="line">  msg = content.lstrip(robot_name)</div><div class="line">  if msg == &apos;刷屏&apos;:</div><div class="line">      Send(beauty, group_id, sender_name)</div><div class="line">  else:</div><div class="line">      if msg == &apos;&apos;:</div><div class="line">          msg = &apos;几点了&apos;</div><div class="line">      print(TuLin(msg, sender_id))</div><div class="line">      Send(TuLin(msg, sender_id), group_id, sender_name)</div><div class="line">  return True</div></pre></td></tr></table></figure></p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><h5 id="目前功能包括智能聊天-报时-看新闻-查菜谱-查列车航班-一-刷屏-好友自助加群-成语接龙-笑话-百科-新成员加群自动欢迎…更多功能待开发"><a href="#目前功能包括智能聊天-报时-看新闻-查菜谱-查列车航班-一-刷屏-好友自助加群-成语接龙-笑话-百科-新成员加群自动欢迎…更多功能待开发" class="headerlink" title="目前功能包括智能聊天,报时,看新闻,查菜谱,查列车航班,一@刷屏,好友自助加群,成语接龙,笑话,百科,新成员加群自动欢迎…更多功能待开发"></a>目前功能包括智能聊天,报时,看新闻,查菜谱,查列车航班,一@刷屏,好友自助加群,成语接龙,笑话,百科,新成员加群自动欢迎…更多功能待开发</h5><p> <img src="/img/201607181.jpg" width="330" height="500" alt="刷屏" align="center"><br> <img src="/img/201607182.jpg" width="330" height="500" alt="报时 查快递" align="center"><br> <img src="/img/201607183.jpg" width="330" height="500" alt="菜谱 成语接龙" align="center"><br> <img src="/img/201607184.jpg" width="330" height="500" alt="智能聊天" align="center"><br> <img src="/img/201607185.jpg" width="330" height="500" alt="看新闻" align="center"><br> <img src="/img/201607186.jpg" width="330" height="500" alt="好友自助进群" align="center"><br> <img src="/img/201607187.jpg" width="330" height="500" alt="查询列车航班" align="center"></p>
<blockquote>
<p>相关文献:<br>图灵API: <a href="https://github.com/sjdy521/Mojo-Weixin/blob/master/API.md" target="_blank" rel="external">API接入文档</a><br>微信接口: <a href="http://www.tuling123.com/html/doc/api.html" target="_blank" rel="external">Mojo-Weixin</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BeautifulSoup 整理]]></title>
      <url>http://blog.wususu.cn/2016/07/14/2016-07-14-BeautifulSoup-%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h1><p> Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.<br> 它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.<br> <a id="more"></a><br> 简单说就是利用bs4”美化”HTML,定位HTML标签来获得目标数据,实乃爬虫一大利器.</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h1><p> <strong>1. Tag</strong><br>soup.+tag_name  可以多次调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg:  soup.head</div><div class="line">	<span class="comment"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></div><div class="line">        soup.body.b</div><div class="line">	<span class="comment"># &lt;b&gt;The Dormouse's story&lt;/b&gt;</span></div></pre></td></tr></table></figure><br>  重命名一个tag,改变属性的值,添加或删除属性:<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">eg:  soup = BeautifulSoup(<span class="string">'&lt;b class="boldest"&gt;Extremely bold&lt;/b&gt;'</span>)</div><div class="line">	tag = soup.b</div><div class="line"></div><div class="line">	tag.name = <span class="string">"blockquote"</span></div><div class="line">	tag[<span class="string">'class'</span>] = <span class="string">'verybold'</span></div><div class="line">	tag[<span class="string">'id'</span>] = <span class="number">1</span></div><div class="line">	<span class="comment"># &lt;blockquote class="verybold" id="1"&gt;Extremely bold&lt;/blockquote&gt;</span></div><div class="line"></div><div class="line">	<span class="keyword">del</span> tag[<span class="string">'class'</span>]</div><div class="line">	<span class="keyword">del</span> tag[<span class="string">'id'</span>]</div><div class="line">	<span class="comment"># &lt;blockquote&gt;Extremely bold&lt;/blockquote&gt;</span></div></pre></td></tr></table></figure></p>
<p> <strong>3. 属性</strong><br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg:  tag.attrs</div><div class="line">	<span class="comment">#[''class', 'blodest']</span></div><div class="line">	tag[<span class="string">'属性名字'</span>]</div><div class="line">   </div></pre></td></tr></table></figure></p>
<p> <strong>2. 子孙</strong><br> .contents 属性可以将tag的子节点以列表的方式输出:<br> .children 生成器,可以对tag的子节点进行循环:<br> .descendants   获得子孙节点</p>
<p> <strong>4. 父辈</strong><br> .parent  获取某个元素的父节点<br> .parents  可以递归得到元素的所有父辈节点</p>
<p><strong>5.  文本内容</strong><br> .string  tag仅有一个子或者没有节点.string 方法返回字符串<br>.strings  tag中包含多个字符串 [2] ,可以使用 .strings 来循环获取<br>.stripped_strings  除多余空白内容的方法</p>
<p>  修改 .string:<br>给tag的 .string 属性赋值,可以替代原来的内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">eg:  markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">	soup = BeautifulSoup(markup)</div><div class="line"></div><div class="line">	tag = soup.a</div><div class="line">	tag.string = <span class="string">"New link text."</span></div><div class="line">	<span class="comment"># &lt;a href="http://example.com/"&gt;New link text.&lt;/a&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="一些有用的方法"><a href="#一些有用的方法" class="headerlink" title="一些有用的方法"></a>一些有用的方法</h1><p> <strong>1.  append()</strong><br>  向标签中添加内容:<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">eg:  soup = BeautifulSoup(<span class="string">"&lt;a&gt;Foo&lt;/a&gt;"</span>)</div><div class="line">	soup.a.append(<span class="string">"Bar"</span>)</div><div class="line"></div><div class="line">	soup</div><div class="line">	<span class="comment"># &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a&gt;FooBar&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</span></div><div class="line">	soup.a.contents</div><div class="line">	<span class="comment"># [u'Foo', u'Bar'</span></div><div class="line">	</div></pre></td></tr></table></figure></p>
<p> <strong>2. new_string() 和 new_tag()</strong><br>  如果想要创建一段注释,或 NavigableString 的任何子类,将子类作为 new_string() 方法的第二个参数传入:<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eg:  <span class="keyword">from</span> bs4 <span class="keyword">import</span> Comment</div><div class="line">	new_comment = soup.new_string(<span class="string">"Nice to see you."</span>, Comment)</div><div class="line">	tag.append(new_comment)</div><div class="line">	<span class="comment"># &lt;b&gt;Hello there&lt;!--Nice to see you.--&gt;&lt;/b&gt;</span></div><div class="line">	tag.contents</div><div class="line">	<span class="comment"># [u'Hello', u' there', u'Nice to see you.']</span></div><div class="line">	</div></pre></td></tr></table></figure><br>创建一个tag最好的方法是调用工厂方法 BeautifulSoup.new_tag() :<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">eg:  soup = BeautifulSoup(<span class="string">"&lt;b&gt;&lt;/b&gt;"</span>)</div><div class="line">	original_tag = soup.b</div><div class="line"></div><div class="line">	new_tag = soup.new_tag(<span class="string">"a"</span>, href=<span class="string">"http://www.example.com"</span>)</div><div class="line">	original_tag.append(new_tag)</div><div class="line">	original_tag</div><div class="line">	<span class="comment"># &lt;b&gt;&lt;a href="http://www.example.com"&gt;&lt;/a&gt;&lt;/b&gt;</span></div><div class="line"></div><div class="line">	new_tag.string = <span class="string">"Link text."</span></div><div class="line">	original_tag</div><div class="line">	<span class="comment"># &lt;b&gt;&lt;a href="http://www.example.com"&gt;Link text.&lt;/a&gt;&lt;/b&gt;</span></div><div class="line">		</div></pre></td></tr></table></figure><br> <strong>3. insert()</strong><br>与append() 类似, 不过可以指定位置<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg:  tag.insert(<span class="number">1</span>, <span class="string">"but did not endorse "</span>)</div><div class="line">	<span class="comment"># &lt;a href="http://example.com/"&gt;I linked to but did not endorse &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;</span></div><div class="line">	tag.contents</div><div class="line">	<span class="comment"># [u'I linked to ', u'but did not endorse', &lt;i&gt;example.com&lt;/i&gt;]</span></div></pre></td></tr></table></figure></p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索:"></a>搜索:</h1><p> <strong>1. find_all(self, name, attrs, recursive, text,  limit, kwargs )</strong><br>    查找符合匹配的标签,返回一个list</p>
<p>   a. name:   参数的值可以使任一类型的: ,字符串,正则表达式,列表,方法或是 True .<br>   字符串:<br> 查找所有 “name” 标签<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eg:  soup.find_all(<span class="string">'title'</span>)</div><div class="line">    <span class="comment">#[&lt;title&gt;广州兼职工作-兼职吧&lt;/title&gt;] </span></div></pre></td></tr></table></figure><br> 正则表达式:<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eg:   soup.find_all(re.compile(<span class="string">'ti[a-z]&#123;2&#125;e'</span>))</div><div class="line">    <span class="comment">#[&lt;title&gt;广州兼职工作-兼职吧&lt;/title&gt;]</span></div></pre></td></tr></table></figure><br>  列表: 只要与列表任一元素匹配,就返回<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eg:  soup.find_all([<span class="string">'head'</span>, <span class="string">'a'</span>, re.compile(<span class="string">'ti[a-z]&#123;2&#125;e'</span>)])</div><div class="line">     <span class="comment">#[&lt;title&gt;广州兼职工作-兼职吧&lt;/title&gt;, &lt;a href="/" style="margin-left:8px;margin-right:2px;font-size:15px;" target="_blank"&gt;&lt;/a&gt;]</span></div></pre></td></tr></table></figure><br>  方法: 自定义过滤方法, 正确的返回true<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eg:  <span class="function"><span class="keyword">def</span> <span class="title">aa</span><span class="params">(tag)</span>:</span></div><div class="line">    		<span class="keyword">if</span> tag.has_attr(<span class="string">'href'</span>):</div><div class="line">        		<span class="keyword">return</span> true</div><div class="line">        soup.find_all(aa)</div><div class="line">     <span class="comment">#[&lt;link href="http://www.jianzhi8.com/comcity",...]</span></div></pre></td></tr></table></figure></p>
<p>   b. keyword参数(官方文档有,但是pycharm没显示这个参数,不解), 搜索每个属性和属性值匹配的标签:<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eg:  soup.find_all(id = <span class="string">'link2'</span>)</div><div class="line">	<span class="comment">#[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure><br>  可以指定多个匹配属性:<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eg:  soup.find_all(href=re.compile(<span class="string">"elsie"</span>), id=<span class="string">'link1'</span>)</div><div class="line">	<span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;three&lt;/a&gt;]</span></div></pre></td></tr></table></figure><br>同样,参数值可以是 字符串 , 正则表达式 , 列表, True .</p>
<p>   c. recursive:  默认为true, Beautiful Soup会检索当前标签的所有子孙节点,如果只想搜索标签的直接子节点,可以使用 recursive=False<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eg: soup.find_all(<span class="string">"title"</span>, recursive = <span class="keyword">False</span>)</div><div class="line">	<span class="comment">#[]</span></div><div class="line">	soup.find_all(<span class="string">"html"</span>, recursive = <span class="keyword">True</span>)</div><div class="line">	<span class="comment">#&lt;html&gt;&lt;head&gt;&lt;title&gt;......&lt;/html&gt;</span></div><div class="line">	</div></pre></td></tr></table></figure></p>
<p>   d. text: 搜索文档中的字符串内容(文本内容).与 name 参数的可选值一样, text 参数接受 字符串 , 正则表达式 , 列表, 函数, True<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">eg: soup.find_all(text=<span class="string">"Elsie"</span>)</div><div class="line">	<span class="comment"># [u'Elsie']</span></div><div class="line"></div><div class="line">       soup.find_all(text=[<span class="string">"Tillie"</span>, <span class="string">"Elsie"</span>, <span class="string">"Lacie"</span>])</div><div class="line">	<span class="comment"># [u'Elsie', u'Lacie', u'Tillie']</span></div><div class="line"></div><div class="line">       soup.find_all(text=re.compile(<span class="string">"Dormouse"</span>))</div><div class="line">	<span class="comment">#[u"The Dormouse's story", u"The Dormouse's story"]</span></div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">def</span> <span class="title">is_the_only_string_within_a_tag</span><span class="params">(s)</span>:</span></div><div class="line">       		Return <span class="keyword">True</span> <span class="keyword">if</span> this string <span class="keyword">is</span> the only child of its parent tag.<span class="string">""</span></div><div class="line">       		<span class="keyword">return</span> (s == s.parent.string)</div><div class="line"></div><div class="line">   	soup.find_all(text=is_the_only_string_within_a_tag)</div><div class="line">	<span class="comment"># [u"The Dormouse's story", u"The Dormouse's story", u'Elsie', u'Lacie', u'Tillie', u'...']</span></div><div class="line">	</div></pre></td></tr></table></figure></p>
<p>   e. limit: 限制返回结果的数量.当搜索到的结果数量达到 limit 的限制时,停止返回</p>
<p>  f. attrs :参数定义一个字典参数来搜索包含属性的标签, 与keyword效果相似,不过两种都有不能搜索的属性, 混着用, 效果更加哟<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg: soup.find_all(attrs=&#123;<span class="string">"type"</span>:<span class="string">"text"</span>&#125;)</div><div class="line">	<span class="comment">#[&lt;input class="sr_btn" id="s_key" name="s_key" type="text" value=""/&gt;]</span></div><div class="line"> </div></pre></td></tr></table></figure></p>
<p>   g. 按照css搜索, 其实就是 keyword 搜索时键为class时的特殊情况<br> // tip: CSS类名的关键字 class 在Python中是保留字,使用 class 做参数会导致语法错误.从Beautiful Soup的4.1.1版本开始,可以通过 class_ 参数搜索有指定CSS类名的tag<br>     class 属性是 多值属性(一个tag可以有多个CSS的class) .按照CSS类名搜索tag时,可以分别搜索tag中的每个CSS类名:<br>       <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg:   css_soup = BeautifulSoup(<span class="string">'&lt;p class="body strikeout"&gt;&lt;/p&gt;'</span>)</div><div class="line">	 css_soup.find_all(<span class="string">"p"</span>, class_=<span class="string">"strikeout"</span>)</div><div class="line">	<span class="comment"># [&lt;p class="body strikeout"&gt;&lt;/p&gt;]</span></div><div class="line">	</div></pre></td></tr></table></figure></p>
<p>   h. 官方doc大概就是说find_all()太常用了, 你们直接用Beautiful对象就可以调用方法.感觉没什么用,反而增加了阅读源码的难度<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eg:  soup.find_all(<span class="string">"a"</span>)  &lt;==&gt;  soup(<span class="string">"a"</span>)</div></pre></td></tr></table></figure></p>
<p> <strong>2. find( name , attrs , recursive , text , </strong>kwargs )**<br>  只返回一个搜索结果(limit = 1 的情况), 匹配不到返回None, 其余与find_all()大同小异</p>
<p> <strong>3. find_parents( name , attrs , recursive , text , </strong>kwargs ) 和 find_parent( name , attrs , recursive , text , <strong>kwargs )</strong><br>  find_all() find() 搜索当前节点的子孙节点. 而这两个搜索当前节点的父辈节点.<br>  parent 搜索到最近一个匹配的, 以金字塔形式由上(匹配处)至下(当前及其兄弟标签)返回所有标签<br>  parents 上面的全部匹配点, 同理</p>
<p> <strong>4. find_next_siblings()  find_next_sibling() 和 find_previous_siblings() find_previous_sibling()</strong><br>  顾名思义,返回前面和后面的兄弟标签</p>
<p> <strong>5. find_all_next()  find_next() 和 find_all_previous()  find_previous()</strong><br>  返回之前和之后的标签</p>
<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p> <strong>1. 格式化输出:  </strong><br>prettify() 方法将Beautiful Soup的文档树格式化后以Unicode编码输出,每个XML/HTML标签都独占一行<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eg:  soup.prettify()</div><div class="line">	<span class="comment"># '&lt;html&gt;\n &lt;head&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;a href="http://example.com/"&gt;\n... '</span></div></pre></td></tr></table></figure></p>
<p> <strong>2. 压缩输出:</strong><br> 只要字符串,不重视格式,那么可以对一个 BeautifulSoup 对象或 Tag 对象使用Python的 unicode() 或 str() 方法:<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eg:  str(soup)</div><div class="line">	<span class="comment"># '&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'</span></div><div class="line"></div><div class="line">	unicode(soup.a)</div><div class="line">	<span class="comment"># u'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div></pre></td></tr></table></figure></p>
<p> <strong>3. get_text()</strong><br> 只想得到tag中包含的文本内容,用 get_text() 方法,获取到tag中包含的所有文版内容包括子孙tag中的内容,并将结果作为Unicode字符串返回:<br>可以通过参数指定tag的文本内容的分隔符:<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eg:  soup.get_text(<span class="string">"|"</span>)</div><div class="line">	<span class="comment">#u'\nI linked to |example.com|\n'</span></div><div class="line">去除获得文本内容的前后空白:</div><div class="line">eg:  soup.get_text(<span class="string">"|"</span>, strip=<span class="keyword">True</span>)</div><div class="line">	<span class="comment">#u'I linked to|example.com' 	</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>参考文献:</p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">官方文档</a><br>2016/07/13 23:41:36</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
